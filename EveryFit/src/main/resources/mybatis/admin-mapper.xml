<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="admin">

	<select id="adminMemberList" resultType="MemberDto">
		select * from member
		order by member_email asc
	</select>

	<select id="adminMemberTarget" resultType="MemberDto">
		select* from member
		where member_email = #{memberEmail}
	</select>



	<!-- 회원 복합 검색 -->

	<select id="adminMemberSearch" resultType="MemberDto">

		<!-- <include refid="pagingHeader"></include> -->

		select * from member
		<where>

			<if test="memberEmail != null">
				and instr(member_email, #{memberEmail}) > 0
			</if>

			<if test="memberName !=null">
				and instr(member_name, #{memberName}) > 0
			</if>

			<if test="memberNick != null">
				and instr(member_nick,#{memberNick}) >0
			</if>

			<if test="memberContact != null">
				and instr(member_contact, #{memberContact})>0
			</if>

			<choose>

				<when
					test="memberBirthBegin != null and memberBirthEnd != null">
					and to_date(member_birth, 'YYYY-MM-DD') between
					to_date(#{memberBirthBegin} || ' ' ||'00:00:00','YYYY-MM-DD
					HH24:MI:SS')
					and
					to_date(#{memberBirthEnd} || ' ' ||'23:59:59',
					'YYYY-MM-DD HH:24:MI:SS')
				</when>
				<when test="memberBirthBegin != null">
<![CDATA[
and to_date(member_birth, 'YYYY-MM-DD') <= 
to_date(#{memberBirthBegin} || ' ' ||'00:00:00','YYYY-MM-DD HH24:MI:SS')
]]>
				</when>
				<when test="memberBirthEnd != null">
<![CDATA[
and to_date(member_birth, 'YYYY-MM-DD') >=
to_date(#{memberBirthEnd} || ' ' || '23:59:59', 'YYYY-MM-DD HH24:MI:SS')
]]>
				</when>
			</choose>

			<if test="memberGenderList != null and memberGenderList.size() >0">
				and member_gender in
				<foreach collection="memberGenderList" open="(" close=")"
					separator="," item="Gender">
					#{Gender}
				</foreach>
			</if>

			<if test="memberLevelList != null and memberLevelList.size()>0">
				and member_level in
				<foreach collection="memberLevelList" open="(" close=")"
					separator="," item="Level">
					#{Level}
				</foreach>
			</if>


		</where>

		<!-- 정렬 -->
		<if test="orderList != null  and  orderList.size() >0">
			order by
			<foreach collection="orderList" separator="," item="order">
				${order}
			</foreach>
		</if>

	</select>


	<!-- 모임 목록 -->
	<select id="adminMoimList" resultType="AdminMoimMemberCountVO">
		select m.*
		,nvl(mml.member_count, 0) member_count from moim m left outer join (
		select moim_no, count(*) member_count from moim_member_list group by
		moim_no )
		mml on m.moim_no = mml.moim_no where moim_state in '모집중'
		order by
		m.moim_no
		desc
	</select>


	<!-- 모임 복합 검색 -->
	<select id="adminMoimSearch" resultType="MoimDto">
		select * from moim

		<where>
			<if test="moimNo !=null">
				and instr(moim_no, #{moimNo})>0
			</if>
			<if test="moimTitle  !=null">
				and instr(moim_title, #{moimTitle})>0
			</if>
			<if test="moimMemberCount  !=null">
				and instr(moim_member_count, #{moimMemberCount})>0
			</if>

			<choose>
				<when test="moimTimeStart != null and moimTimeEnd !=null ">
					and to_date(moim_time, 'YYYY-MM-DD') between
					to_date(#{moimTimeStart} || ' ' || '00:00:00', 'YYYY-MM-DD
					HH24:MI:SS') and
					to_date(#{moimTimeEnd} || ' ' || '23:59:59',
					'YYYY-MM-DD HH24:MI:SS')
				</when>
				<when test="moimTimeStart != null">
				<![CDATA[	
				and to_date(moim_time, 'YYYY-MM-DD') <= 
				to_date(#{moimTimeStart} || ' ' ||'00:00:00', 'YYYY-MM-DD HH24:MI:SS')
				]]>
				</when>
				<when test="moimTimeEnd !=null">
				<![CDATA[
				and to_date(moim_time, 'YYYY-MM-DD') >=
				to_date(#{moimTimeEnd} || ' ' || '23:59:59', 'YYYY-MM-DD HH24:MI:SS')
				]]>
				</when>

			</choose>

			<if test=" moimUpgradeList !=null and moimUpgradeList.size() >0">
				and moim_upgrade in
				<foreach collection="moimUpgradeList" open="(" close=")"
					separator="," item="UpgradeList">
					#{UpgradeList}
				</foreach>
			</if>

			<if
				test="moimGenderCheckList != null and moimGenderCheckList.size() >0">
				and moim_gender_check in
				<foreach collection="moimGenderCheckList" open="(" close=")"
					separator="," item="GenderList">
					#{GenderList}
				</foreach>
			</if>
			<if test="moimStateList !=null and moimStateList.size()>0">
				and moim_state in
				<foreach collection="moimStateList" open="(" close=")"
					separator="," item="StateList">
					#{StateList}
				</foreach>
			</if>
		</where>


		<if test="orderList !=null and orderList.size()>0">
			order by
			<foreach collection="orderList" separator="," item="order">
				${order}
			</foreach>
		</if>

	</select>

	<!-- 정모 -->

	<select id="adminJungmoList" resultType="JungmoDto">
		select * from jungmo
		order by
		jungmo_no asc
	</select>

	<select id="adminJungmoSearch" resultType="JungmoDto">
		select * from jungmo
		<where>
			<if test="jungmoNo != null">
				and instr(jungmo_no, #{jungmoNo}) > 0
			</if>
			<if test="moimNo != null">
				and instr(moim_no, #{moimNo}) > 0
			</if>
			<if test="jungmoTitle != null">
				and instr(jungmo_title, #{jungmoTitle}) > 0
			</if>
			<if test="jungmoCapacity != null">
				and instr(jungmo_capacity, #{jungmoCapacity}) > 0
			</if>
			<if test="jungmoPrice != null">
				and instr(jungmo_price, #{jungmoPrice}) > 0
			</if>
			<choose>
				<when
					test="jungmoScheduleStart != null and jungmoScheduleEnd !=null ">
					and to_date(jungmo_schedule, 'YYYY-MM-DD') between
					to_date(#{jungmoScheduleStart} || ' ' || '00:00:00', 'YYYY-MM-DD
					HH24:MI:SS') and
					to_date(#{jungmoScheduleEnd} || ' ' || '23:59:59',
					'YYYY-MM-DD HH24:MI:SS')
				</when>
				<when test="jungmoScheduleStart != null">
				<![CDATA[	
				and to_date(jungmo_schedule, 'YYYY-MM-DD') <= 
				to_date(#{jungmoScheduleStart} || ' ' ||'00:00:00', 'YYYY-MM-DD HH24:MI:SS')
				]]>
				</when>
				<when test="jungmoScheduleEnd !=null">
				<![CDATA[
				and to_date(moim_time, 'YYYY-MM-DD') >=
				to_date(#{jungmoScheduleEnd} || ' ' || '23:59:59', 'YYYY-MM-DD HH24:MI:SS')
				]]>
				</when>

			</choose>


			<if test="jungmoStateList !=null and jungmoStateList.size()>0">
				and jungmo_status in
				<foreach collection="jungmoStateList" open="(" close=")"
					separator="," item="StateList">
					#{StateList}
				</foreach>
			</if>


		</where>




		<if test="orderList != null and orderList.size() >0">
			order by
			<foreach collection="orderList" separator="," item="order">
				${order}
			</foreach>
		</if>
	</select>

	<!-- 메인 홈페이지 -->

	<select id="findMoimProfile" resultType="AttachDto">
		select * from attach
		where attach_no = (
		select attach_no from moim_image
		where moim_no =
		#{moimNo})
	</select>

	<select id="moimProfileList" resultType="int">
		select moim_no from
		moim_image
	</select>

	<select id="PremiumMoimList" resultType="AdminMoimMemberCountVO">
		select m.*
		,nvl(mml.member_count, 0) member_count from moim m left outer
		join (
		select moim_no, count(*) member_count from moim_member_list group by
		moim_no
		)
		mml on m.moim_no = mml.moim_no where moim_upgrade in 'Y' and
		moim_state
		in '모집중' order by
		DBMS_RANDOM.RANDOM
	</select>

	<select id="GenderCheckMoimList"
		resultType="AdminMoimMemberCountVO">
		select m.* ,nvl(mml.member_count, 0) member_count from moim
		m left outer
		join (
		select moim_no, count(*) member_count from
		moim_member_list group by moim_no
		)
		mml on m.moim_no = mml.moim_no where
		moim_gender_check in 'Y' and
		moim_state in '모집중' order by
		DBMS_RANDOM.RANDOM

	</select>


	<!-- 신고 -->
	<select id="ReportList" resultType="ReportDto">
		select * from report order by
		report_no dsec
	</select>

	<select id="adminReportSearch" resultType="ReportDto">
		select * from report



		<where>

			<if test="reportNo != null">
				and instr(report_no, #{reportNo}) > 0
			</if>
			<if test="reportContent != null">
				and instr(report_content, #{reportContent}) > 0
			</if>
			<if test="reportReason != null">
				and instr(report_reason, #{reportReason}) > 0
			</if>


			<choose>
				<when test="reportTimeStart != null and reportTimeEnd !=null ">
					and to_date(report_time, 'YYYY-MM-DD') between
					to_date(#{reportTimeStart} || ' ' || '00:00:00', 'YYYY-MM-DD
					HH24:MI:SS') and
					to_date(#{reportTimeEnd} || ' ' || '23:59:59',
					'YYYY-MM-DD HH24:MI:SS')



				</when>
				<when test="reportTimeStart != null">
				<![CDATA[	
				and to_date(report_time, 'YYYY-MM-DD') <= 
				to_date(#{reportTimeStart} || ' ' ||'00:00:00', 'YYYY-MM-DD HH24:MI:SS')
				]]>
				</when>
				<when test="reportTimeEnd !=null">
				<![CDATA[
				and to_date(report_time, 'YYYY-MM-DD') >=
				to_date(#{reportTimeEnd} || ' ' || '23:59:59', 'YYYY-MM-DD HH24:MI:SS')
				]]>
				</when>

			</choose>


			<if
				test="reportCategoryList !=null and reportCategoryList.size()>0">
				and report_category in
				<foreach collection="reportCategoryList" open="(" close=")"
					separator="," item="reportCategoryList">
					#{reportCategoryList}
				</foreach>
			</if>

		</where>




		<if test="orderList != null and orderList.size() >0">
			order by
			<foreach collection="orderList" separator="," item="order">
				${order}
			</foreach>
		</if>
	</select>

	<!-- 모임 멤버 카운트 -->
	<select id="memberCount" resultType="AdminMoimMemberCountVO">
		select
		m.* ,
		nvl(mml.member_count, 0) member_count
		from moim m left outer join (
		select moim_no, count(*) member_count from moim_member_list group by
		moim_no
		) mml on m.moim_no = mml.moim_no
	</select>


	<!-- 신고 기능 -->
	<select id="sequence" resultType="int">
		select report_seq.nextval
		from
		dual
	</select>


	<insert id="reportApply">
		insert into report(
		report_no,
		report_reason,
		report_content,
		report_time,
		report_category
		)
		values(
		#{reportNo},
		#{reportReason},
		#{reportContent},
		sysdate,
		#{reportCategory}
		)
	</insert>

	<select id="reportDetail" resultType="ReportDto">
		select * from report where
		report_no = #{reportNo}
	</select>


	<select id="findReportImage" resultType="Integer">
		select attach_no from
		report_image where report_no = #{reportNo}
	</select>


	<insert id="insertReportImage">
		insert into report_image
		(report_no,
		attach_no)
		values(#{reportNo}, #{attachNo})
	</insert>

	<delete id="deleteReportImage">
		delete report_image where report_no =
		#{reportNo}
	</delete>


	<update id="insertBlock">
		update member set member_block = 'Y' where member_email = #{memberEmail}
	</update>

	<update id="deleteBlock">
		update member set member_block = 'N' where member_email = #{memberEmail}
	</update>

</mapper>