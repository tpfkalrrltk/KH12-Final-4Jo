<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="moim">
	<!-- 모임CRUD -->
	
	<select id="sequence" resultType="int">
		select moim_seq.nextval from dual
	</select>

	<insert id="createMoim">
		insert into moim(
		moim_no,
		location_no,
		event_no,
		moim_title,
		moim_content,
		moim_member_count,
		moim_gender_check,
		chat_room_no
		)
		values(
		#{moimNo},
		#{locationNo},
		#{eventNo},
		#{moimTitle},
		#{moimContent},
		#{moimMemberCount},
		#{moimGenderCheck},
		#{chatRoomNo}
		)
	</insert>

	<!-- 모임 수정 -->
	<update id="editMoim">
		update moim
		<set>
			<if test="locationNo != null">
				location_no=#{locationNo},
			</if>
			<if test="eventNo != null">
				event_no=#{eventNo},
			</if>
			<if test="moimTitle != null">
				moim_title=#{moimTitle},
			</if>
			<if test="moimContent != null">
				moim_content=#{moimContent},
			</if>
			<if test="moimState != null">
				moim_state = #{moimState},
			</if>
			<if test="moimGenderCheck != null">
				moim_gender_check=#{moimGenderCheck}
			</if>
		</set>
		where moim_no=#{moimNo}
	</update>

	<select id="moimList" resultType="MoimDto">
		select * from moim order by moim_no asc 
		<!-- 나중에 복합검색 구현하기 -->
	</select>
	
	
	<select id="findMoim" resultType="MoimDto">
		select * from moim where moim_no = #{moimNo}
	</select>
	
	<!-- 모임회원들이 볼 목록 -->
	<select id="moimMemberList" resultType="MoimMemberDto">
		select * from moim_member_list 
		where moim_no = #{moimNo} 
		and moim_member_status != '차단'	
	</select>
	
	<!-- 모임장이 볼 목록 -->
	<select id="moimMemberListForMoimJang" resultType="MoimMemberDto">
		select * from moim_member_list 
		where moim_no = #{moimNo} 
	</select>
	
	<!-- 세션값으로 멤버레벨 / 상태 확인 -->
	<select id="findMoimJang" resultType="moimMemberDto">
		select * from moim_member 
		where member_email = #{memberEmail} 
	</select>
	
	<!-- 모임회원상태변경 -->
	<update id="updateMoimMemberStatus">
		update moim_member 
		<set>
		<if test="memberBlock != null">
		moim_member_status = '차단' 
		</if>
		<if test="memberUnBlock != null">
		moim_member_status = '승인' 
		</if>
		<if test="memberApproval != null">
		moim_member_status = '승인' 
		</if>
        <if test="memberTransfer != null">
        moim_member_level = '모임장' 
        </if>
		</set>
		where member_email = #{memberEmail} 
		and moim_no = #{moimNo} 
	</update>
	
	<!-- 모임 회원 탈퇴 -->
	<delete id="exitMoimMember">
		delete moim_member where moim_no = #{moimNo} and member_email = #{memberEmail}
	</delete>
	
	<!-- 이메일로 회원이 가입한 모임 목록 조회 -->
	<select id="moimListByEmail" resultType="MoimDto">
		SELECT m.* FROM moim m LEFT OUTER JOIN moim_member mm 
		ON m.MOIM_NO = mm.MOIM_NO WHERE mm.MEMBER_EMAIL = #{memberEmail}
	</select>
	
	<!-- 리그 참여할 수 있는 모임  -->
	<select id="checkMoimList" resultType="LeagueTeamCheckDto">
		SELECT m.*, mm.moim_member_level FROM moim m LEFT OUTER JOIN moim_member mm ON m.MOIM_NO = mm.MOIM_NO 
		WHERE mm.MEMBER_EMAIL = #{memberEmail}
		AND m.LOCATION_NO = #{locationNo} 
		AND m.EVENT_NO = #{eventNo} 
	</select>
	
	<!-- 모임 회원 count(모임 상세에서 찍어주려고) -->
	<select id="moimMemberCount" resultType="int">
		select count(*) from moim_member where moim_no = #{moimNo}
	</select>
	
	<!-- 모임 등록할 때 모임장 등록 -->
	<insert id="insertMoimJang">
       	insert into moim_member(
       		member_email, 
       		moim_no, 
       		moim_member_level,
       		moim_member_status
       		)
        values(#{memberEmail}, #{moimNo}, '모임장', '승인')
	</insert>
	
	<!-- 모임 가입할 때 멤버 등록 -->
	<insert id="insertMoimMember">
	    <selectKey keyProperty="GenderCheck" resultType="String" order="BEFORE">
	        select moim_gender_check from moim where moim_no = #{moimNo}
	    </selectKey>
	
	    <if test="GenderCheck == 'Y'">
	        <!-- 젠더체크를 할 경우 상태 미승인 -->
	       	insert into moim_member(
	       		member_email, 
	       		moim_no, 
	       		moim_member_level,
	       		moim_member_status
	       		)
	        values(#{memberEmail}, #{moimNo}, '일반', '미승인')
	    </if>
	
	    <if test="GenderCheck == 'N'">
	        <!-- 젠더체크를 안 할 경우 상태 승인 -->
	        insert into moim_member(
	        	member_email, 
	        	moim_no, 
	        	moim_member_level,
	        	moim_member_status
	        	)
	        values(#{memberEmail}, #{moimNo}, '일반', '승인')
	    </if>
	</insert>
	<!-- 회원이 모임 등록할 때 이미 등록되어있는지 조회하기 -->
	<!-- 
		회원이 모임 등록할 때 회원등급을 조회해서 
		이미 등록된 모임개수확인 후 초과하지않았으면 등록 아니면 반려 
	-->

	<!-- 정모CRUD -->
	
	<select id="jungmoSequence" resultType="int">
		select jungmo_seq.nextval from dual
	</select>
	<!-- 정모 등록 -->
	<insert id="createJungmo">
	    insert into jungmo (
	        jungmo_no,
	        moim_no,
	        jungmo_title,
	        jungmo_addr,
	        jungmo_addr_link,
	        jungmo_capacity,
	        jungmo_price,
	        jungmo_schedule,
	        chat_room_no
	    )
	    values (
	        #{jungmoNo},
	        #{moimNo},
	        #{jungmoTitle},
	        #{jungmoAddr},
	        #{jungmoAddrLink},
	        #{jungmoCapacity},
	        #{jungmoPrice},
	        #{jungmoSchedule},
	        #{chatRoomNo}
	    )
	</insert>
	
	<!-- 정모 수정 -->
	<update id="editJungmo">
	    update jungmo
	    <set>
	        <if test="jungmoTitle != null">
	            jungmo_title = #{jungmoTitle},
	        </if>
	        <if test="jungmoAddr != null">
	            jungmo_addr = #{jungmoAddr},
	        </if>
	        <if test="jungmoAddrLink != null">
	            jungmo_addr_link = #{jungmoAddrLink},
	        </if>
	        <if test="jungmoCapacity != 0">
	            jungmo_capacity = #{jungmoCapacity},
	        </if>
	        <if test="jungmoPrice != 0">
	            jungmo_price = #{jungmoPrice},
	        </if>
	        <if test="jungmoSchedule != null">
	            jungmo_schedule = #{jungmoSchedule},
	        </if>
	    </set>
	    where jungmo_no = #{jungmoNo}
	</update>
	
	<!-- 정모 목록(이미지번호랑 같이 조회) -->
	<select id="jungmoList" resultType="JungmoListVO">
		select * from jungmo_list where moimNo = #{moimNo}
	</select>
	<!-- 계층형으로 조회하기! -->
	<!-- 추가해야할것 : 
			정모멤버수/
			멤버아이디+프로필사진번호/
			정모상태(마감제외)-->
<!-- 	<select id="jungmoList" resultType="JungmoListByMoimNoVO"> -->
<!-- 		select j.*, ji.attach_no from jungmo j  -->
<!-- 		left outer join jungmo_image ji  -->
<!-- 		on j.jungmo_no = ji.jungmo_no -->
<!-- 		<where> -->
<!-- 		moim_no = #{moimNo}  -->
<!-- 		</where>  -->
<!-- 		order by j.jungmo_schedule desc  -->
<!-- 	</select> -->
		
	<!-- 	
		정모리스트 계층형 조회
		- 상태 모집중, 마감, 인원마감, 취소(골라서 조회 추가해야함)
	 -->
	<resultMap type="jungmoWithMembersVO" id="jungmoWithMembersVO">
		<!-- 객체 -->
		<association property="jungmoListVO">
			<result column="jungmo_no" property="jungmoNo"/>
			<result column="moim_no" property="moimNo"/>
			<result column="jungmo_title" property="jungmoTitle"/>
			<result column="jungmo_addr" property="jungmoAddr"/>
			<result column="jungmo_addr_link" property="jungmoAddrLink"/>
			<result column="jungmo_capacity" property="jungmoCapacity"/>
			<result column="jungmo_price" property="jungmoPrice"/>
			<result column="jungmo_schedule" property="jungmoSchedule"/>
			<result column="jungmo_status" property="jungmoStatus"/>
			<result column="chat_room_no" property="chatRoomNo"/>
			<result column="jungmo_image_attach_no" property="jungmoImageAttachNo"/>
			<result column="member_count" property="memberCount"/>
		</association>
		
		<!-- List -->
		<collection property="jungmoMemberList" select="jungmoMemberList"
			column="jungmo_no" javaType="java.util.List" ofType="jungmoListVO">
			<result column="member_email" property="memberEmail"/>
			<result column="jungmo_no" property="jungmoNo"/>
			<result column="attach_no" property="attachNo"/>
		</collection>
	</resultMap>
	
	<!-- 정모리스트(대표정보) -->
	<select id="jungmoListAll" resultMap="jungmoWithMembersVO">
		select * from jungmo_list where moim_no = #{moimNo} 
		and jungmo_schedule >= current_timestamp
	</select>
	
	<!-- 정모번호 별 멤버리스트 -->
	<select id="jungmoMemberList" resultType="jungmoMemberListVO">
		select * from jungmo_member_list where jungmo_no = #{jungmoNo} 
	</select>

	<!-- 해당 정모의 회원목록+프로필사진번호 -->
<!-- 	<select id="jungmoMemberList" resultType="JungmoMemberListVO"> -->
<!-- 		select j.member_email, mi.attach_no, j.jungmo_no  from jungmo_member j  -->
<!-- 		left outer join member_image mi  -->
<!-- 		on j.member_email = mi.member_email -->
<!-- 		where jungmo_no = #{jungmoNo}  -->
<!-- 	</select> -->

	<!-- 정모 상세정보 -->
	<select id="findJungmo" resultType="JungmoDto">
		select * from jungmo where jungmo_no = #{jungmoNo}
	</select>
	
	<!-- 정모 취소 -->
	<update id="deleteJungmo">
		update jungmo set 
		jungmo_status = '취소' 
		where jungmo_no = #{jungmoNo} 
	</update>
	
	<!-- 정모에 회원 등록 -->
    <select id="memberCheck" resultType="String">
       select member_email from jungmo_member 
       where jungmo_no = #{jungmoNo} and 
       member_email = #{memberEmail}
    </select>
    
	<insert id="insertJungmoMember">
		insert into jungmo_member(
			jungmo_no,
			member_email
		)
		values(
			#{jungmoNo},
			#{memberEmail}
		 )
	</insert>
	
	<!-- 정모 멤버 수 count -->
	<select id="jungmoMemberCount" resultType="int">
		select count(*) from jungmo_member where jungmo_no = #{jungmoNo}
	</select>

	<!-- 정모 등록 취소 -->
	<delete id="deleteJungmoMember">
		delete from jungmo_member
		where jungmo_no = #{jungmoNo} 
		and member_email = #{memberEmail}
	</delete>
		
	<!-- 프로필사진 등록 -->
	<insert id="insertMoimProfile">
		insert into moim_image
		(moim_no, attach_no)
		values(#{moimNo}, #{attachNo})
	</insert>
	<insert id="insertJungmoProfile">
		insert into jungmo_image
		(jungmo_no, attach_no) 
		values(#{jungmoNo}, #{attachNo})
	</insert>
	
	<!-- 프로필사진 삭제 -->
	<delete id="deleteMoimProfile">
		delete moim_image where moim_no = #{moimNo}
	</delete>
	<delete id="deleteJungMoProfile">
		delete jungmo_image where jungmo_no = #{jungmoNo}
	</delete>
	
	<!-- 프로필 사진 검색 -->
	<select id="findMoimProfile" resultType="Integer">
		select attach_no from moim_image where moim_no = #{moimNo}
	</select>
	<select id="findJungmoProfile" resultType="Integer">
		select attach_no from jungmo_image where jungmo_no = #{jungmoNo}
	</select>
	

	<!-- 모임 좋아요 -->
	<insert id="insertMemberLike">
		insert into member_like (moim_no, member_email) 
		values(#{moimNo}, #{memberEmail})
	</insert>
	
	<delete id="deleteMemberLike">
		delete member_like where member_email = #{memberEmail} 
		and moim_no = #{moimNo}
	</delete>
	
	<select id="checkMemberLike" resultType="MemberLikeDto">
		select * from member_like where member_email = #{memberEmail} 
		and moim_no = #{moimNo} 
	</select>
	
	<select id="countMemberLike" resultType="int">
		select count(*) from member_like where moim_no = #{moimNo}
	</select>


	<!-- 회원EMAIL이 모임장으로 가입된 MOIM 번호 조회 -->
	<select id="findMoimNoPerMemberEmailAndCrown" resultType="MoimMemberDto">
		select * from moim_member where member_email = #{MemberEmail} and moim_member_level = '모임장'
	</select>

	
	<!-- 회원EMAIL이 모임장으로 가입된 MOIM 번호, 이름 조회 -->
	<select id="findMoimNoAndMoimTitlePerMemberEmailAndCrown" resultType="MoimTitleForPaymentVO">
		select p.member_email, p.moim_no, 
               p.moim_member_level, p.moim_member_status, 
               pp.moim_title 
               from moim_member p
               left outer join moim pp 
               on 
               p.moim_no = pp.moim_no 
               where member_email = #{MemberEmail} and moim_member_level = '모임장'
	</select>
</mapper>



